#include <iostream>
#include <vector>

int main(){


    /*
    #1463
    정수 X에 사용할 수 있는 연산은 다음과 같이 세 가지 이다.
        1. X가 3으로 나누어 떨어지면, 3으로 나눈다.
        2. X가 2로 나누어 떨어지면 2로 나눈다.
        3. 1을 뺀다.
    정수 N이 주어졌을 때, 위와 같은 연산 세 개를 적절히 사용해서
    1을 만들려고 한다.
    연산을 사용하는 횟수의 최솟값을 출력하시오.
    */

    int N;
    std::cin >> N; // 1보다 크거나 같고, 10^6보다 작거나 같은 정수

    // 첫째 줄에 연산을 하는 횟수의 최솟값을 출력한다.

    // REF: https://jaemin8852.tistory.com/170
    /*
    우선 DP[N]을 정수 N을 1로 만드는 데 필요한 최소 연산 횟수라고 정의
    N은 N-1에서 1을 더해 만들 수 있고, N/2에서 2를 곱해 만들 수 있고,
    N/3에서 3을 곱해 만들 수 있습니다.

    DP[N]은 DP[N-1]과 DP[N/2]와 DP[N/3]에서 한 번의 연산을 더 수행해서
    만들 수 있습니다.
    하지만 DP[N]은 최소 연산 횟수이기 때문에,
    DP[N] = min(DP[N-1]+1, DP[N/2]+1, DP[N/3]+1)라는 식이 생깁니다.
    */


   std::vector<int> DP(1000001,0);
   for(int i =2; i <=N ; ++i){
       DP[i] = DP[i-1]+1;
       if (i%2==0)
        DP[i] = std::min(DP[i], DP[i/2]+1);
       if (i%3==0)
        DP[i] = std::min(DP[i], DP[i/3]+1);
   }

    std::cout << DP[N] << std::endl;

    return 0;
}